name: ack_workspace
repository: https://github.com/btwld/ack

# sdkPath: .fvm/flutter_sdk  # Commented out for CI compatibility

packages:
  - packages/**
  - example

command:
  version:
    # Generate changelogs for the workspace
    workspaceChangelog: true
    # Link to GitHub release in changelog
    linkToCommits: true  
    # Message for version commits
    message: "chore(release): publish packages\n\n{new_package_versions}"
    # Hooks for customizing the versioning process
    hooks:
      preCommit: |
        # Update dependent package constraints here if needed
        echo "Running pre-commit hook for versioning"

scripts:
  analyze:
    run: melos exec -- "dart analyze . --fatal-infos"
    description: Run analyzer on all packages
    packageFilters:
      scope:
        - ack
        - ack_generator
        - ack_example

  fix:
    run: melos exec -- "dart fix --apply"
    description: Apply fixes to all packages
    packageFilters:
      scope:
        - ack
        - ack_generator
        - ack_example
      dependsOn:
        - "ack"  # This will ensure 'ack' is prioritized

  test:
    run: melos exec -- "dart test"
    description: Run tests for all packages
    packageFilters:
      dirExists: test

  format:
    run: melos exec -- "dart format . --fix"
    description: Format code for all packages

  deps-outdated:
    run: melos exec -- "dart pub outdated"
    description: Check for outdated dependencies in all packages

  # Create proper analysis_options.yaml files
  ensure_analysis_options:
    run: .scripts/ensure_analysis_options.sh
    description: Ensures each package has DCM configuration in analysis_options.yaml

  # Additional standard Melos commands
  bs:
    run: melos bootstrap
    description: Initialize the workspace with dependencies.

  clean:
    run: melos clean
    description: Clean all build outputs.

  # Build scripts for code generation
  build:
    run: melos exec -- "dart run build_runner build --delete-conflicting-outputs"
    description: Run build_runner for all packages
    packageFilters:
      dependsOn: build_runner

  # Version and publish scripts
  # Publishing helpers
  publish:
    run: melos publish --no-dry-run --yes
    description: Publish packages to pub.dev
    
  release:
    run: |
      melos version --yes
      melos publish --no-dry-run --yes
    description: One-step version and publish

  # ACK Generator specific test commands
  test:gen:
    run: melos exec -c 1 -- dart test
    description: Run generator tests
    packageFilters:
      scope: ack_generator

  test:gen:watch:
    run: melos exec -c 1 -- dart test --watch
    description: Run generator tests in watch mode
    packageFilters:
      scope: ack_generator

  update-golden:
    run: cd packages/ack_generator && dart tool/update_goldens.dart
    description: Update golden test files (interactive - specify test names)

  update-golden:all:
    run: cd packages/ack_generator && dart tool/update_goldens.dart --all
    description: Update all golden test files

  test:golden:
    run: melos exec -c 1 -- dart test --tags=golden
    description: Run only golden tests
    packageFilters:
      dirExists: test/golden

  # JSON Schema Draft-7 validation
  validate-jsonschema:
    run: |
      echo "🔧 Installing Node.js dependencies..."
      (cd tools && npm install)
      echo "🧪 Running JSON Schema Draft-7 validation tests..."
      (cd packages/ack && dart test test/src/utils/jsonschema_compatibility_test.dart)
    description: Validate JSON Schema Draft-7 specifications

  validate-jsonschema:batch:
    run: |
      cd tools && npm install
      node jsonschema-validator.js validate-batch --input test-fixtures/schema-validation-config.json
    description: Run batch JSON Schema Draft-7 validation

  validate-jsonschema:setup:
    run: cd tools && npm install
    description: Install Node.js dependencies for JSON Schema validation

  # API compatibility checking with dart_apitool
  api-check:setup:
    run: dart pub global activate dart_apitool
    description: Install dart_apitool globally

  api-extract:
    run: |
      dart pub global activate dart_apitool
      dart-apitool extract --input "./packages/ack" --output "api-model-ack.json"
    description: Extract current API model for ack package

  # Pre-1.0 Development Mode (Lenient)
  api-check:dev:
    run: |
      LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
      if [ -n "$LAST_TAG" ]; then
        echo "🔍 Development API check (lenient mode for pre-1.0)"
        dart-apitool diff \
          --old "pub://ack/${LAST_TAG#v}" \
          --new "./packages/ack" \
          --report-format cli \
          --ignore-prerelease \
          --version-check-mode onlyBreakingChanges \
          --ignore-requiredness || echo "⚠️  API changes detected - review recommended"
      else
        echo "No previous release found. Creating baseline..."
        dart-apitool extract --input "./packages/ack" --output "api-baseline-first.json"
        echo "✅ Baseline created for first release"
      fi
    description: Development-friendly API check (pre-1.0, warnings only)

  # Production Mode (Strict)
  api-check:strict:
    run: |
      LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
      if [ -n "$LAST_TAG" ]; then
        echo "🔍 Strict API compatibility check"
        dart-apitool diff \
          --old "pub://ack/${LAST_TAG#v}" \
          --new "./packages/ack" \
          --report-format cli \
          --ignore-prerelease \
          --version-check-mode fully
      else
        echo "❌ No previous release found for strict comparison"
        exit 1
      fi
    description: Strict API compatibility check (for releases)

  # Legacy command (maintained for backward compatibility)
  api-check:ack:
    run: melos api-check:dev
    description: Alias for api-check:dev (backward compatibility)

  api-check:local:
    run: |
      if [ ! -f "api-model-ack-baseline.json" ]; then
        echo "No baseline found. Creating baseline from current state..."
        dart-apitool extract --input "./packages/ack" --output "api-model-ack-baseline.json"
        echo "Baseline created. Make your changes and run this command again."
      else
        echo "Comparing current API against local baseline..."
        dart-apitool diff \
          --old "api-model-ack-baseline.json" \
          --new "./packages/ack" \
          --report-format cli
      fi
    description: Check API changes against local baseline (for development)

  api-report:
    run: |
      LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
      if [ -n "$LAST_TAG" ]; then
        dart-apitool diff \
          --old "pub://ack/${LAST_TAG#v}" \
          --new "./packages/ack" \
          --report-format markdown \
          --report-file-path "api-compatibility-report.md" \
          --ignore-prerelease
        echo "Report generated: api-compatibility-report.md"
      else
        echo "No previous release found for comparison"
      fi
    description: Generate detailed API compatibility report in Markdown format

  # Pre-release validation (before tagging)
  api-check:pre-release:
    run: |
      echo "🚀 Pre-release API validation"
      LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
      if [ -n "$LAST_TAG" ]; then
        # Check with strict mode but generate detailed report
        dart-apitool diff \
          --old "pub://ack/${LAST_TAG#v}" \
          --new "./packages/ack" \
          --report-format markdown \
          --report-file-path "pre-release-api-report.md" \
          --ignore-prerelease \
          --version-check-mode fully
        echo "📋 Pre-release report: pre-release-api-report.md"
        echo "✅ Ready for release (API check passed)"
      else
        echo "🎉 First release - no API compatibility issues"
      fi
    description: Comprehensive pre-release API validation

  # Convenient API management using the helper script
  api:baseline:create:
    run: ./tools/api-baseline.sh create
    description: Create API baseline for development (helper script)

  api:baseline:check:
    run: ./tools/api-baseline.sh check
    description: Check API changes against baseline (helper script)

  api:baseline:report:
    run: ./tools/api-baseline.sh report
    description: Generate detailed API changes report (helper script)

  # Development-friendly release checking
  api:release:check:dev:
    run: ./tools/api-baseline.sh release-dev
    description: Check API against last release (development mode - warnings only)

  # Strict release checking
  api:release:check:
    run: ./tools/api-baseline.sh release
    description: Check API against last release (strict mode - for final validation)

  # Comprehensive pre-release validation
  api:pre-release:
    run: ./tools/api-baseline.sh pre-release
    description: Comprehensive pre-release API validation with detailed reports

  # Tag-based comparison commands
  api:compare:
    run: |
      if [ -z "$TAG" ]; then
        echo "❌ Please specify a tag: melos api:compare --TAG=v0.2.0"
        echo "📋 Available tags:"
        ./tools/api-baseline.sh list-tags
        exit 1
      fi
      ./tools/api-baseline.sh compare-tag "$TAG"
    description: Compare API against specific tag (use --TAG=v0.2.0)

  api:compare:strict:
    run: |
      if [ -z "$TAG" ]; then
        echo "❌ Please specify a tag: melos api:compare:strict --TAG=v0.2.0"
        echo "📋 Available tags:"
        ./tools/api-baseline.sh list-tags
        exit 1
      fi
      ./tools/api-baseline.sh compare-tag "$TAG" strict
    description: Compare API against specific tag in strict mode (use --TAG=v0.2.0)

  api:tags:
    run: ./tools/api-baseline.sh list-tags
    description: List available git tags for API comparison

  # Quick comparison against common patterns
  api:vs-last:
    run: |
      LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
      if [ -n "$LAST_TAG" ]; then
        echo "🔍 Comparing against last tag: $LAST_TAG"
        ./tools/api-baseline.sh compare-tag "$LAST_TAG"
      else
        echo "❌ No tags found. Create a tag first or use local baseline."
        ./tools/api-baseline.sh create
      fi
    description: Quick comparison against the last git tag

  api:vs-last:strict:
    run: |
      LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
      if [ -n "$LAST_TAG" ]; then
        echo "🔍 Strict comparison against last tag: $LAST_TAG"
        ./tools/api-baseline.sh compare-tag "$LAST_TAG" strict
      else
        echo "❌ No tags found. Cannot perform strict comparison."
        exit 1
      fi
    description: Strict comparison against the last git tag
