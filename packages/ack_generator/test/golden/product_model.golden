// GENERATED CODE - DO NOT MODIFY BY HAND

// ignore_for_file: unnecessary_this, unnecessary_new, unnecessary_const, prefer_collection_literals
// ignore_for_file: lines_longer_than_80_chars, unnecessary_null_checks, non_constant_identifier_names

part of 'product_model.dart';

// **************************************************************************
// AckSchemaGenerator
// **************************************************************************

/// Generated schema for Product
/// A product model with validation
class ProductSchema extends SchemaModel<Product> {
  ProductSchema([Object? value = null]) : super(value);

  static final ObjectSchema schema = Ack.object(
    {
      'id': Ack.string.notEmpty(),
      'name': Ack.string.notEmpty(),
      'description': Ack.string.notEmpty(),
      'price': Ack.double,
      'imageUrl': Ack.string.nullable(),
      'category': CategorySchema.schema,
    },
    required: ['id', 'name', 'description', 'price', 'category'],
    additionalProperties: true,
  );

  /// Ensures this schema and its dependencies are registered
  static void ensureInitialize() {
    SchemaRegistry.register<Product, ProductSchema>(
      (data) => ProductSchema(data),
    );
    // Register schema dependencies
    CategorySchema.ensureInitialize();
  }

  @override
  AckSchema getSchema() => schema;

  String get id => getValue<String>('id')!;

  String get name => getValue<String>('name')!;

  String get description => getValue<String>('description')!;

  double get price => getValue<double>('price')!;

  String? get imageUrl => getValue<String>('imageUrl');

  CategorySchema get category {
    return CategorySchema(getValue<Map<String, dynamic>>('category')!);
  }

  Map<String, Object?> get metadata {
    final map = toMap();
    final knownFields = {
      'id',
      'name',
      'description',
      'price',
      'imageUrl',
      'category'
    };
    return Map.fromEntries(
        map.entries.where((e) => !knownFields.contains(e.key)));
  }

  @override
  Product toModel() {
    if (!isValid) {
      throw AckException(getErrors()!);
    }
    return Product(
      id: id,
      name: name,
      description: description,
      price: price,
      imageUrl: imageUrl,
      category: category.toModel(),
      metadata: metadata,
    );
  }

  /// Convert the schema to a JSON Schema
  static Map<String, Object?> toJsonSchema() =>
      JsonSchemaConverter(schema: schema).toSchema();
}

/// Generated schema for Category
/// A category for organizing products
class CategorySchema extends SchemaModel<Category> {
  CategorySchema([Object? value = null]) : super(value);

  static final ObjectSchema schema = Ack.object(
    {
      'id': Ack.string.notEmpty(),
      'name': Ack.string.notEmpty(),
      'description': Ack.string.nullable(),
    },
    required: ['id', 'name'],
    additionalProperties: true,
  );

  /// Ensures this schema and its dependencies are registered
  static void ensureInitialize() {
    SchemaRegistry.register<Category, CategorySchema>(
      (data) => CategorySchema(data),
    );
  }

  @override
  AckSchema getSchema() => schema;

  String get id => getValue<String>('id')!;

  String get name => getValue<String>('name')!;

  String? get description => getValue<String>('description');

  Map<String, Object?> get metadata {
    final map = toMap();
    final knownFields = {'id', 'name', 'description'};
    return Map.fromEntries(
        map.entries.where((e) => !knownFields.contains(e.key)));
  }

  @override
  Category toModel() {
    if (!isValid) {
      throw AckException(getErrors()!);
    }
    return Category(
      id: id,
      name: name,
      description: description,
      metadata: metadata,
    );
  }

  /// Convert the schema to a JSON Schema
  static Map<String, Object?> toJsonSchema() =>
      JsonSchemaConverter(schema: schema).toSchema();
}
