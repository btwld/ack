// GENERATED CODE - DO NOT MODIFY BY HAND

// ignore_for_file: unnecessary_this, unnecessary_new, unnecessary_const, prefer_collection_literals
// ignore_for_file: lines_longer_than_80_chars, unnecessary_null_checks, non_constant_identifier_names

part of 'block_model.dart';

// **************************************************************************
// AckSchemaGenerator
// **************************************************************************

/// Generated schema for Block
/// Base class for blocks that make up a slide
class BlockSchema extends SchemaModel<BlockSchema> {
  /// Default constructor for parser instances
  const BlockSchema();

  /// Private constructor for validated instances
  const BlockSchema._valid(Map<String, Object?> data) : super.valid(data);

  static final ObjectSchema schema = Ack.object(
    {},
    required: [],
    additionalProperties: false,
  );

  /// Parse with validation - core implementation
  @override
  BlockSchema parse(Object? data) {
    final result = definition.validate(data);
    if (result.isOk) {
      final validatedData = Map<String, Object?>.from(
        result.getOrThrow(),
      );
      return BlockSchema._valid(validatedData);
    }
    throw AckException(result.getError());
  }

  /// Ensures this schema and its dependencies are registered
  static void ensureInitialize() {
    SchemaRegistry.register<BlockSchema>(
      (data) => const BlockSchema().parse(data),
    );
  }

  @override
  ObjectSchema get definition => schema;

  /// Convert the schema to a JSON Schema
  static Map<String, Object?> toJsonSchema() =>
      JsonSchemaConverter(schema: schema).toSchema();
}

/// Generated schema for SectionBlock
/// A section block that contains multiple columns
class SectionBlockSchema extends SchemaModel<SectionBlockSchema> {
  /// Default constructor for parser instances
  const SectionBlockSchema();

  /// Private constructor for validated instances
  const SectionBlockSchema._valid(Map<String, Object?> data)
      : super.valid(data);

  static final ObjectSchema schema = Ack.object(
    {
      'columns': Ack.list(ColumnBlockSchema.schema),
    },
    required: ['columns'],
    additionalProperties: false,
  );

  /// Parse with validation - core implementation
  @override
  SectionBlockSchema parse(Object? data) {
    final result = definition.validate(data);
    if (result.isOk) {
      final validatedData = Map<String, Object?>.from(
        result.getOrThrow(),
      );
      return SectionBlockSchema._valid(validatedData);
    }
    throw AckException(result.getError());
  }

  /// Ensures this schema and its dependencies are registered
  static void ensureInitialize() {
    SchemaRegistry.register<SectionBlockSchema>(
      (data) => const SectionBlockSchema().parse(data),
    );
    // Register schema dependencies
    ColumnBlockSchema.ensureInitialize();
  }

  @override
  ObjectSchema get definition => schema;

  List<ColumnBlockSchema> get columns {
    return getValue<List>('columns')!
        .whereType<Map<String, Object?>>()
        .map((item) => const ColumnBlockSchema().parse(item))
        .toList();
  }

  /// Convert the schema to a JSON Schema
  static Map<String, Object?> toJsonSchema() =>
      JsonSchemaConverter(schema: schema).toSchema();
}

/// Generated schema for ColumnBlock
/// A column block that contains markdown content
class ColumnBlockSchema extends SchemaModel<ColumnBlockSchema> {
  /// Default constructor for parser instances
  const ColumnBlockSchema();

  /// Private constructor for validated instances
  const ColumnBlockSchema._valid(Map<String, Object?> data) : super.valid(data);

  static final ObjectSchema schema = Ack.object(
    {
      'content': Ack.string,
    },
    required: ['content'],
    additionalProperties: false,
  );

  /// Parse with validation - core implementation
  @override
  ColumnBlockSchema parse(Object? data) {
    final result = definition.validate(data);
    if (result.isOk) {
      final validatedData = Map<String, Object?>.from(
        result.getOrThrow(),
      );
      return ColumnBlockSchema._valid(validatedData);
    }
    throw AckException(result.getError());
  }

  /// Ensures this schema and its dependencies are registered
  static void ensureInitialize() {
    SchemaRegistry.register<ColumnBlockSchema>(
      (data) => const ColumnBlockSchema().parse(data),
    );
  }

  @override
  ObjectSchema get definition => schema;

  String get content => getValue<String>('content')!;

  /// Convert the schema to a JSON Schema
  static Map<String, Object?> toJsonSchema() =>
      JsonSchemaConverter(schema: schema).toSchema();
}
