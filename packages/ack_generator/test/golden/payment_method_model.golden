// GENERATED CODE - DO NOT MODIFY BY HAND

// ignore_for_file: unnecessary_this, unnecessary_new, unnecessary_const, prefer_collection_literals
// ignore_for_file: lines_longer_than_80_chars, unnecessary_null_checks, non_constant_identifier_names

part of 'payment_method_model.dart';

// **************************************************************************
// AckSchemaGenerator
// **************************************************************************

/// Generated base schema for PaymentMethod with inheritance support
/// A payment method that can be credit card, bank transfer, or digital wallet
class PaymentMethodSchema extends BaseSchema {
  PaymentMethodSchema([Object? super.value = null]);

  static final DiscriminatedObjectSchema schema = Ack.discriminated(
    discriminatorKey: 'type',
    schemas: {
      'credit_card': CreditCardPaymentSchema.schema,
      'bank_transfer': BankTransferPaymentSchema.schema,
      'digital_wallet': DigitalWalletPaymentSchema.schema,
    },
  );

  static final ObjectSchema baseSchema = Ack.object(
    {
      'type': Ack.string,
      'limit': Ack.double.nullable(),
      'isDefault': Ack.boolean,
    },
    required: ['type'],
    additionalProperties: false,
  );

  /// Ensures this schema and its dependencies are registered
  static void ensureInitialize() {
    SchemaRegistry.register<PaymentMethodSchema>(
      (data) => PaymentMethodSchema(data),
    );
    CreditCardPaymentSchema.ensureInitialize();
    BankTransferPaymentSchema.ensureInitialize();
    DigitalWalletPaymentSchema.ensureInitialize();
  }

  @override
  AckSchema getSchema() => schema;

  String get type => getValue<String>('type')!;

  double? get limit => getValue<double>('limit');

  bool get isDefault => getValue<bool>('isDefault')!;

  R when<R>({
    required R Function(CreditCardPaymentSchema) creditCard,
    required R Function(BankTransferPaymentSchema) bankTransfer,
    required R Function(DigitalWalletPaymentSchema) digitalWallet,
  }) =>
      switch (type) {
        'credit_card' => creditCard(CreditCardPaymentSchema(toMap())),
        'bank_transfer' => bankTransfer(BankTransferPaymentSchema(toMap())),
        'digital_wallet' => digitalWallet(DigitalWalletPaymentSchema(toMap())),
        _ => throw StateError('Unknown paymentmethod type: $type'),
      };

  R maybeWhen<R>({
    R Function(CreditCardPaymentSchema)? creditCard,
    R Function(BankTransferPaymentSchema)? bankTransfer,
    R Function(DigitalWalletPaymentSchema)? digitalWallet,
    required R Function() orElse,
  }) =>
      switch (type) {
        'credit_card' =>
          creditCard?.call(CreditCardPaymentSchema(toMap())) ?? orElse(),
        'bank_transfer' =>
          bankTransfer?.call(BankTransferPaymentSchema(toMap())) ?? orElse(),
        'digital_wallet' =>
          digitalWallet?.call(DigitalWalletPaymentSchema(toMap())) ?? orElse(),
        _ => orElse(),
      };

  /// Convert the schema to a JSON Schema
  static Map<String, Object?> toJsonSchema() =>
      JsonSchemaConverter(schema: schema).toSchema();
}

/// Generated schema for CreditCardPayment extending PaymentMethodSchema
/// Credit card payment with card details
class CreditCardPaymentSchema extends PaymentMethodSchema {
  CreditCardPaymentSchema([Object? super.value = null]);

  static final ObjectSchema schema = PaymentMethodSchema.baseSchema.extend(
    {
      'cardNumber': Ack.string.minLength(4),
      'cardholderName': Ack.string.notEmpty(),
      'expiryDate': Ack.string,
      'brand': Ack.string
    },
    required: ['cardNumber', 'cardholderName', 'expiryDate', 'brand'],
    additionalProperties: false,
  );

  /// Ensures this schema and its dependencies are registered
  static void ensureInitialize() {
    SchemaRegistry.register<CreditCardPaymentSchema>(
      (data) => CreditCardPaymentSchema(data),
    );
  }

  @override
  AckSchema getSchema() => schema;

  String get cardNumber => getValue<String>('cardNumber')!;

  String get cardholderName => getValue<String>('cardholderName')!;

  String get expiryDate => getValue<String>('expiryDate')!;

  String get brand => getValue<String>('brand')!;

  /// Convert the schema to a JSON Schema
  static Map<String, Object?> toJsonSchema() =>
      JsonSchemaConverter(schema: schema).toSchema();
}

/// Generated schema for BankTransferPayment extending PaymentMethodSchema
/// Bank transfer payment with account details
class BankTransferPaymentSchema extends PaymentMethodSchema {
  BankTransferPaymentSchema([Object? super.value = null]);

  static final ObjectSchema schema = PaymentMethodSchema.baseSchema.extend(
    {
      'accountNumber': Ack.string.notEmpty(),
      'routingNumber': Ack.string.notEmpty(),
      'bankName': Ack.string.notEmpty(),
      'accountHolderName': Ack.string.notEmpty()
    },
    required: [
      'accountNumber',
      'routingNumber',
      'bankName',
      'accountHolderName'
    ],
    additionalProperties: false,
  );

  /// Ensures this schema and its dependencies are registered
  static void ensureInitialize() {
    SchemaRegistry.register<BankTransferPaymentSchema>(
      (data) => BankTransferPaymentSchema(data),
    );
  }

  @override
  AckSchema getSchema() => schema;

  String get accountNumber => getValue<String>('accountNumber')!;

  String get routingNumber => getValue<String>('routingNumber')!;

  String get bankName => getValue<String>('bankName')!;

  String get accountHolderName => getValue<String>('accountHolderName')!;

  /// Convert the schema to a JSON Schema
  static Map<String, Object?> toJsonSchema() =>
      JsonSchemaConverter(schema: schema).toSchema();
}

/// Generated schema for DigitalWalletPayment extending PaymentMethodSchema
/// Digital wallet payment like PayPal, Apple Pay, etc.
class DigitalWalletPaymentSchema extends PaymentMethodSchema {
  DigitalWalletPaymentSchema([Object? super.value = null]);

  static final ObjectSchema schema = PaymentMethodSchema.baseSchema.extend(
    {
      'provider': Ack.string.notEmpty(),
      'walletId': Ack.string.email(),
      'metadata': Ack.object({}, additionalProperties: true)
    },
    required: ['provider', 'walletId'],
    additionalProperties: false,
  );

  /// Ensures this schema and its dependencies are registered
  static void ensureInitialize() {
    SchemaRegistry.register<DigitalWalletPaymentSchema>(
      (data) => DigitalWalletPaymentSchema(data),
    );
  }

  @override
  AckSchema getSchema() => schema;

  String get provider => getValue<String>('provider')!;

  String get walletId => getValue<String>('walletId')!;

  Map<String, dynamic> get metadata =>
      getValue<Map<String, Object?>>('metadata')!;

  /// Convert the schema to a JSON Schema
  static Map<String, Object?> toJsonSchema() =>
      JsonSchemaConverter(schema: schema).toSchema();
}
