name: CI/CD with FVM

on:
  push:
    branches: [ "main"]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Setup FVM for Flutter/Dart version management
      - name: Setup FVM
        uses: kuhnroyal/flutter-fvm-config-action@v2
        with:
          cache: true

      # Setup Flutter using FVM-specified version
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: .fvmrc
          cache: true

      # Setup Melos
      - name: Setup Melos
        run: dart pub global activate melos

      # Bootstrap workspace
      - name: Bootstrap workspace
        run: melos bootstrap

      - name: Analyze project source
        run: melos analyze
        env:
          DART_GENERATE_WARNINGS_IN_GENERATED_FILES: false

      - name: Run tests
        run: melos test

  publish:
    needs: test
    runs-on: ubuntu-latest
    # Run only on pushes to tags like v1.0.0
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      # Setup FVM for Flutter/Dart version management
      - name: Setup FVM
        uses: kuhnroyal/flutter-fvm-config-action@v2
        with:
          cache: true

      # Setup Flutter using FVM-specified version
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: .fvmrc
          cache: true

      # Setup Melos
      - name: Setup Melos
        run: dart pub global activate melos

      # Bootstrap workspace
      - name: Bootstrap workspace
        run: melos bootstrap

      # Publish packages
      - name: Publish to pub.dev
        run: melos publish --no-dry-run --yes
        env:
          PUB_DEV_ACCESS_TOKEN: ${{ secrets.PUB_DEV_ACCESS_TOKEN }}
          PUB_DEV_REFRESH_TOKEN: ${{ secrets.PUB_DEV_REFRESH_TOKEN }}
          PUB_DEV_ID_TOKEN_AUDIENCE: ${{ secrets.PUB_DEV_ID_TOKEN_AUDIENCE }}